import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.measure(q,c)
circuit.draw(output = 'mpl')
import math
import statistics
  
def runsTest(l, l_median):
  
    runs, n1, n2 = 0, 0, 0
      
    # Checking for start of new run
    for i in range(len(l)):
          
        # no. of runs
        if (l[i] >= l_median and l[i-1] < l_median) or \
                (l[i] < l_median and l[i-1] >= l_median):
            runs += 1  
          
        # no. of positive values
        if(l[i]) >= l_median:
            n1 += 1   
          
        # no. of negative values
        else:
            n2 += 1   
  
    runs_exp = ((2*n1*n2)/(n1+n2))+1
    stan_dev = math.sqrt((2*n1*n2*(2*n1*n2-n1-n2))/ \
                       (((n1+n2)**2)*(n1+n2-1)))
  
    z = (runs-runs_exp)/stan_dev
  
    return z
    
# Making a list of 100 random numbers 

svmm = Aer.get_backend('aer_simulator')
simulator = Aer.get_backend('statevector_simulator')
l = []

for i in range(100):
    job = execute(circuit, simulator)
    result = job.result()
    statevector = result.get_statevector()
    number = 0
    for n in range(statevector.size):
        number+= n*statevector[n]
    l.append(int(numpy.real(number)))
    
l_median= statistics.median(l)
  
Z = abs(runsTest(l, l_median))
print('Z-statistic= ', Z)
