(a)
import qiskit
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.measure(q,c)
circuit.draw(output = 'mpl')
svmm = Aer.get_backend('aer_simulator')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator)
result = job.result()
statevector = result.get_statevector()
number = 0
for n in range(statevector.size):
    number+= n*statevector[n]
print(int(numpy.real(number)))
(b)
import qiskit
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.measure(q,c)
circuit.draw(output = 'mpl')
apitoken = '8eefe7c0506a2676bcd82d6e31f408710558bf9b1c16a95108376b7c0007c4d8eca2a97a01f96d1878a11783bf0c4278571b8ddfdd8df0570f2f93c46845b45c'
IBMQ.save_account(apitoken)
IBMQ.load_account()
provider = IBMQ.get_provider(hub = 'ibm-q', group = 'open', project = 'main')
qcomp = provider.get_backend('ibmq_santiago')
job = execute(circuit, backend = qcomp , shot = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
