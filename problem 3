#(a)
q = QuantumRegister(1)
c = ClassicalRegister(1)
a = QuantumRegister(1)
b = ClassicalRegister(1)
circuit = QuantumCircuit(q,c)
circuit2 = QuantumCircuit(a,b)
circuit.h(q)
circuit.x(q)
circuit2.h(a)
circuit2.y(a)
circuit2.z(a)
circuit.measure(q,c)
circuit2.measure(a,b)
circuit.draw(output = 'mpl')
circuit2.draw(output = 'mpl')
svmm = Aer.get_backend('aer_simulator')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit2, simulator)
result = job.result()
statevector = result.get_statevector()
print (statevector)
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit2, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(b)
circuit = QuantumCircuit(q,c)
circuit2 = QuantumCircuit(a,b)
circuit.x(q)
circuit.h(q)
circuit2.x(a)
circuit2.h(a)
circuit2.z(a)
circuit2.y(a)
circuit.measure(q,c)
circuit2.measure(a,b)
circuit.draw(output = 'mpl')
circuit2.draw(output = 'mpl')
svmm = Aer.get_backend('aer_simulator')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit2, simulator)
result = job.result()
statevector = result.get_statevector()
print (statevector)
svmm = Aer.get_backend('aer_simulator')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator)
result = job.result()
statevector = result.get_statevector()
print (statevector)
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(c)
circuit = QuantumCircuit(q,c)
circuit2 = QuantumCircuit(a,b)
circuit.x(q)
circuit.h(q)
circuit2.h(a)
circuit.measure(q,c)
circuit2.measure(a,b)
circuit.draw(output = 'mpl')
circuit2.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit2, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
