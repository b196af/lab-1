#(e)
import qiskit
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute
q = QuantumRegister(2)
c = ClassicalRegister(2)
circuit = QuantumCircuit(q,c)
circuit.x(q[0])
circuit.i(q[1])
circuit.measure(q,c)
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)

#(f)
circuit = QuantumCircuit(q,c)
circuit.x(q[0])
circuit.i(q[1])
circuit.h(q[0])
circuit.measure(q,c)
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)

#(g)
q = QuantumRegister(2)
c = ClassicalRegister(2)
circuit = QuantumCircuit(q,c)
circuit.i(q[1])
circuit.rx(pi/2, q[0])
circuit.draw(output = 'mpl')
statevector = result.get_statevector()
plot_bloch_multivector(statevector)

#(h)
circuit = QuantumCircuit(q,c)
circuit.h(q[0])
circuit.ry(1.9106, q[0])
circuit.h(q[0])
circuit.measure(q,c)
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator, shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
